/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright held by original author
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Global
    CourantNo

Description
    Calculates and outputs the mean and maximum Courant Numbers.

\*---------------------------------------------------------------------------*/

scalar CoNum = 0.0;
scalar meanCoNum = 0.0;
scalar velMag = 0.0;

if (mesh.nInternalFaces())
{
/*
    surfaceScalarField magPhi = mag(faceIbMask*phi);

    surfaceScalarField SfUfbyDelta =
        mesh.surfaceInterpolation::deltaCoeffs()*magPhi;

    CoNum = gMax(SfUfbyDelta/mesh.magSf())
        .value()*runTime.deltaT().value();

    meanCoNum = (gSum(SfUfbyDelta)/gSum(mesh.magSf()))
        .value()*runTime.deltaT().value();

    velMag = gMax(magPhi/mesh.magSf()).value();*/
 

    surfaceScalarField magPhi = mag(faceIbMask*phi);
 
    surfaceScalarField SfUfbyDelta =
        mesh.surfaceInterpolation::deltaCoeffs()*magPhi;
 
    scalarField magSf=mag(mesh.Sf());
 

    CoNum = 0.5*gMax(SfUfbyDelta/magSf)*runTime.deltaTValue();
 
    meanCoNum =
        0.5*gSum(SfUfbyDelta/magSf)*runTime.deltaTValue();
 
    scalarField vel=magPhi/magSf;
 
    velMag = gMax(vel);
}

Info<< "Courant Number mean: " << meanCoNum
    << " max: " << CoNum
    << " velocity magnitude: " << velMag
    << endl;

// ************************************************************************* //
