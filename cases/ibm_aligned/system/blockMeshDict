/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

xa -0;
xb 2;

ya -0.25;
yb 0.003125;
yc 1;

za -0.0167;
zb 0.0167;

un 0.1;

nx #calc "std::floor(($xb - $xa) / $un)";//120
ny1 #calc "std::floor(($yb - $ya) / $un)";//95
ny2 #calc "std::floor(($yc - $yb) / $un)";//95


vertices
(
    ($xa $ya $za)
    ($xa $yb $za)
    ($xa $yc $za)
    ($xb $ya $za)
    ($xb $yb $za)
    ($xb $yc $za)
    ($xa $ya $zb)
    ($xa $yb $zb)
    ($xa $yc $zb)
    ($xb $ya $zb)
    ($xb $yb $zb)
    ($xb $yc $zb)
);

blocks
(
    hex (0 3 4 1 6 9 10 7) ($nx $ny1 1) simpleGrading (1 1 1)
    hex (1 4 5 2 7 10 11 8) ($nx $ny2 1) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    lower
    {
        type wall;
        faces
        (
            (0 3 9 6)
        );
    }

    upper
    {
        type patch;
        faces
        (
            (2 8 11 5)
        );
    }

    left
    {
        type cyclic;
        neighbourPatch right;
        type patch;
        faces
        (
            (0 6 7 1)
            (1 7 8 2)
        );
    }

    right
    {
        type cyclic;
        neighbourPatch left;
        type patch;
        faces
        (
            (3 4 10 9)
            (4 5 11 10)
        );
    }

    front
    {
        type empty;
        neighbourPatch back;
        faces
        (
            (6 9 10 7)
            (7 10 11 8)
        );
    }

    back
    {
        type empty;
        neighbourPatch front;
        faces
        (
            (0 1 4 3)
            (1 2 5 4)
        );
    }
);

mergePatchPairs
(
);


// ************************************************************************* //
